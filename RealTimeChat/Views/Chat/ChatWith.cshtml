@model ChatViewModel
@using Microsoft.AspNetCore.Identity
@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager
@using System.Security.Claims
@{

    var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);

    var recieverId = "";
    if (Model.SelectedChat.SenderUser.Id == userId)
    {
        recieverId = Model.SelectedChat.OtherUser.Id;
    }
    else
    {
        recieverId = Model.SelectedChat.SenderUser.Id;
    }

}
<style>
    .container {
        max-width: 1170px;
        margin: auto;
    }

    img {
        max-width: 100%;
    }

    .inbox_people {
        background: #f8f8f8 none repeat scroll 0 0;
        float: left;
        overflow: hidden;
        width: 40%;
        border-right: 1px solid #c4c4c4;
    }

    .inbox_msg {
        border: 1px solid #c4c4c4;
        clear: both;
        overflow: hidden;
    }

    .top_spac {
        margin: 20px 0 0;
    }


    .recent_heading {
        float: left;
        width: 40%;
    }

    .srch_bar {
        display: inline-block;
        text-align: right;
        width: 60%;
    }

    .headind_srch {
        padding: 10px 29px 10px 20px;
        overflow: hidden;
        border-bottom: 1px solid #c4c4c4;
    }

    .recent_heading h4 {
        color: #05728f;
        font-size: 21px;
        margin: auto;
    }

    .srch_bar input {
        border: 1px solid #cdcdcd;
        border-width: 0 0 1px 0;
        width: 80%;
        padding: 2px 0 4px 6px;
        background: none;
    }

    .srch_bar .input-group-addon button {
        background: rgba(0, 0, 0, 0) none repeat scroll 0 0;
        border: medium none;
        padding: 0;
        color: #707070;
        font-size: 18px;
    }

    .srch_bar .input-group-addon {
        margin: 0 0 0 -27px;
    }

    .chat_ib h5 {
        font-size: 15px;
        color: #464646;
        margin: 0 0 8px 0;
    }

        .chat_ib h5 span {
            font-size: 13px;
            float: right;
        }

    .chat_ib p {
        font-size: 14px;
        color: #989898;
        margin: auto
    }

    .chat_img {
        float: left;
        width: 11%;
    }

    .chat_ib {
        float: left;
        padding: 0 0 0 15px;
        width: 88%;
    }

    .chat_people {
        overflow: hidden;
        clear: both;
    }

    .chat_list {
        border-bottom: 1px solid #c4c4c4;
        margin: 0;
        padding: 18px 16px 10px;
    }

    .inbox_chat {
        height: 550px;
        overflow-y: scroll;
    }

    .active_chat {
        background: #ebebeb;
    }

    .incoming_msg_img {
        display: inline-block;
        width: 6%;
    }

    .received_msg {
        display: inline-block;
        padding: 0 0 0 10px;
        vertical-align: top;
        width: 92%;
    }

    .received_withd_msg p {
        background: #ebebeb none repeat scroll 0 0;
        border-radius: 3px;
        color: #646464;
        font-size: 14px;
        margin: 0;
        padding: 5px 10px 5px 12px;
        width: 100%;
    }

    .time_date {
        color: #747474;
        display: block;
        font-size: 12px;
        margin: 8px 0 0;
    }

    .received_withd_msg {
        width: 57%;
    }

    .mesgs {
        float: left;
        padding: 30px 15px 0 25px;
        width: 60%;
    }

    .sent_msg p {
        background: #05728f none repeat scroll 0 0;
        border-radius: 3px;
        font-size: 14px;
        margin: 0;
        color: #fff;
        padding: 5px 10px 5px 12px;
        width: 100%;
    }

    .outgoing_msg {
        overflow: hidden;
        margin: 26px 0 26px;
    }

    .sent_msg {
        float: right;
        width: 46%;
    }

    .input_msg_write input {
        background: rgba(0, 0, 0, 0) none repeat scroll 0 0;
        border: medium none;
        color: #4c4c4c;
        font-size: 15px;
        min-height: 48px;
        width: 100%;
    }

    .type_msg {
        border-top: 1px solid #c4c4c4;
        position: relative;
    }

    .msg_send_btn {
        background: #05728f none repeat scroll 0 0;
        border: medium none;
        border-radius: 50%;
        color: #fff;
        cursor: pointer;
        font-size: 17px;
        height: 33px;
        position: absolute;
        right: 0;
        top: 11px;
        width: 33px;
    }

    .messaging {
        padding: 0 0 50px 0;
    }

    .msg_history {
        height: 516px;
        overflow-y: auto;
    }
</style>
<div class="container">
    <h3 class=" text-center">Chats</h3>
    <div class="messaging">
        <div class="inbox_msg">


            <div class="inbox_people">
                <div class="headind_srch">
                    <div class="recent_heading">
                        <h4>Recent</h4>
                    </div>
                    <div class="srch_bar">
                        <div class="stylish-input-group">
                            <input type="text" class="search-bar" placeholder="Search">
                            <span class="input-group-addon">
                                <button type="button"> <i class="fa fa-search" aria-hidden="true"></i> </button>
                            </span>
                        </div>
                    </div>
                </div>



                <div class="inbox_chat">
                    @foreach (var item in Model.Chats)
                    {
                        <a asp-route-otherId="@item.OtherUser.Id" asp-controller="Chat" asp-action="ChatWith" id="onechat">
                            <div class="chat_list active_chat">
                                <div class="chat_people">
                                    <div class="chat_img"> <img src="@item.OtherUser.ProfileUrl" alt=""> </div>
                                    <div class="chat_ib">
                                        <h5>@item.OtherUser.AppUserName <span class="chat_date">@item.messages.Last().DateTime</span></h5>
                                        <p>
                                            @item.messages.Last().message
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </a>
                    }
                </div>
            </div>



            <div class="mesgs">
                <div class="msg_history" style="height: 400px; overflow-y: auto;">

                        @if (Model.SelectedChat.SenderUser.Id == userId)
                        {

                        <h3>Chat with @Model.SelectedChat.OtherUser.AppUserName

                        </h3>
                    }
                    else
                    {
                        
                    <h3> Chat with @Model.SelectedChat.SenderUser.AppUserName
                        

                    </h3>
                    }
                   

                    @foreach(var item in Model.SelectedChat.messages)
                    {
                        if (item.Sender.Id == userId)
                        {
                            <div class="outgoing_msg">
                                <div class="sent_msg">
                                    <p id="ThisUserText">
                                       @item.message
                                    </p>
                                    <span class="time_date"> @item.DateTime</span>
                                </div>
                            </div>

                        }
                        else
                        {
                            <div class="incoming_msg">
                                <div class="incoming_msg_img"> <img src="" alt=""> </div>
                                <div class="received_msg">
                                    <div class="received_withd_msg">
                                        <p id="OtherUserText">
                                            @item.message
                                        </p>
                                        <span class="time_date"> @item.DateTime</span>
                                    </div>
                                </div>
                            </div>
                        }


                    }

                  
                    
                </div>
                    <div class="type_msg">
                        <div class="input_msg_write">
                            <input type="text" id="typeMessage" class="write_msg" placeholder="Type a message" />
                            <button class="msg_send_btn" onclick="SendMessage('@recieverId')" id="sendbutton" type="button"><i class="fa fa-paper-plane-o" ></i>Send</button>
                        </div>
                    </div>
            </div>



        </div>
    </div>
    <script src="~/js/signalr.js"></script>
    <script>
        //Create connection
        var connectionMessage = new signalR.HubConnectionBuilder().withUrl("/hubs/message").build();

        //Methods that is invoked by the hub
        connectionMessage.on("RecieveMessage", (latestMessage,IsSenderUser) => {


            console.log("Entered Recieved message Function");
            console.log("The Message"+latestMessage);
            console.log("The Checker"+IsSenderUser);
            var msgHistoryContainer = document.querySelector(".msg_history");
            console.log(latestMessage);

            if (IsSenderUser === "yes") {
                // The current user is the sender
                // Add the message to the outgoing message container
                console.log("Sent the message here");
                var sentMsg = document.createElement("div");
                sentMsg.className = "outgoing_msg";
                sentMsg.innerHTML = `
                    <div class="sent_msg">
                        <p id="ThisUserText">${latestMessage}</p>
                        <span class="time_date">${new Date().toLocaleTimeString()}</span>
                    </div>
                `;
                msgHistoryContainer.appendChild(sentMsg);
                msgHistoryContainer.scrollTop = msgHistoryContainer.scrollHeight;
            } else {
                console.log("Received the message here");
                // The current user is the receiver
                // Add the message to the incoming message container
                var receivedMsg = document.createElement("div");
                receivedMsg.className = "incoming_msg";
                receivedMsg.innerHTML = `
                    <div class="incoming_msg_img"> <img src="" alt=""> </div>
                    <div class="received_msg">
                        <div class="received_withd_msg">
                            <p id="OtherUserText">${latestMessage}</p>
                            <span class="time_date">${new Date().toLocaleTimeString()}</span>
                        </div>
                    </div>
                `;
                msgHistoryContainer.appendChild(receivedMsg);
                msgHistoryContainer.scrollTop = msgHistoryContainer.scrollHeight;
            }


        });



        //Methods to invoke method in hub
        function SendMessage(recieverId) {
            var message = document.getElementById("typeMessage");
            if (message.value != "") {
                console.log("Sending To Hub");
                var query = message.value;
            connectionMessage.send('SendMessageHub', query,recieverId);
                message.value = "";

                var msgHistoryContainer = document.querySelector(".msg_history");
                msgHistoryContainer.scrollTop = msgHistoryContainer.scrollHeight;
            }else{
                console.log("Not Working");
            }

        }


        //Start the connection
        function fullfiled() { console.log("Success"); }
        function notfullfiled() { console.log("NotSucccess"); }
        //Start Connection
        connectionMessage.start().then(fullfiled, notfullfiled);

        //Irrelavent to Signalr Functions
        function myFunction(){
            var msgHistoryContainer = document.querySelector(".msg_history");
            msgHistoryContainer.scrollTop = msgHistoryContainer.scrollHeight;
        }
        window.onload = function () {
            myFunction();
        };
    </script>
